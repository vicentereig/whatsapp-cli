name: Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write
  id-token: write

jobs:
  tests:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - name: Go test
        run: go test ./...

  build-linux:
    name: Build Linux (${{ matrix.arch }})
    runs-on: ubuntu-latest
    needs: tests
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - name: Install toolchain
        run: |
          sudo apt-get update
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu qemu-user libc6-arm64-cross
          else
            sudo apt-get install -y qemu-user
          fi
      - name: Build and package
        run: |
          set -euo pipefail
          mkdir -p dist
          export CGO_ENABLED=1
          export GOOS=linux
          export GOARCH=${{ matrix.arch }}
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            export CC=aarch64-linux-gnu-gcc
            export QEMU_LD_PREFIX=/usr/aarch64-linux-gnu
          fi
          BINARY="whatsapp-cli-linux-${{ matrix.arch }}"
          go build -ldflags "-X main.version=${GITHUB_REF_NAME}" -o "dist/${BINARY}" .
          chmod +x "dist/${BINARY}"
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            qemu-aarch64 "./dist/${BINARY}" version >/dev/null
          else
            "./dist/${BINARY}" version >/dev/null
          fi
          tar -C dist -czf "dist/${BINARY}.tar.gz" "${BINARY}"
          rm "dist/${BINARY}"
          (cd dist && sha256sum "${BINARY}.tar.gz" > "${BINARY}.tar.gz.sha256")
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-${{ matrix.arch }}
          path: dist/*

  build-macos:
    name: Build macOS (${{ matrix.arch }})
    runs-on: ${{ matrix.runner }}
    needs: tests
    strategy:
      matrix:
        include:
          - arch: amd64
            runner: macos-13
          - arch: arm64
            runner: macos-14
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - name: Build and package
        run: |
          set -euo pipefail
          mkdir -p dist
          export CGO_ENABLED=1
          export GOOS=darwin
          export GOARCH=${{ matrix.arch }}
          BINARY="whatsapp-cli-darwin-${{ matrix.arch }}"
          go build -ldflags "-X main.version=${GITHUB_REF_NAME}" -o "dist/${BINARY}" .
          chmod +x "dist/${BINARY}"
          "./dist/${BINARY}" version >/dev/null
          tar -C dist -czf "dist/${BINARY}.tar.gz" "${BINARY}"
          rm "dist/${BINARY}"
          (cd dist && shasum -a 256 "${BINARY}.tar.gz" > "${BINARY}.tar.gz.sha256")
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.arch }}
          path: dist/*

  build-windows:
    name: Build Windows (amd64)
    runs-on: windows-latest
    needs: tests
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - name: Build and package
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path dist | Out-Null
          $env:CGO_ENABLED = "1"
          $env:GOOS = "windows"
          $env:GOARCH = "amd64"
          $binary = "whatsapp-cli-windows-amd64.exe"
          go build -ldflags "-X main.version=$env:GITHUB_REF_NAME" -o "dist/$binary" .
          & "dist/$binary" version | Out-Null
          $archive = "whatsapp-cli-windows-amd64.zip"
          Compress-Archive -Path "dist/$binary" -DestinationPath "dist/$archive"
          Remove-Item "dist/$binary"
          $hash = (Get-FileHash "dist/$archive" -Algorithm SHA256).Hash.ToLower()
          "$hash  $archive" | Out-File -FilePath "dist/$archive.sha256" -Encoding utf8
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-amd64
          path: dist/*

  publish:
    name: Publish release
    runs-on: ubuntu-latest
    needs:
      - build-linux
      - build-macos
      - build-windows
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: release
      - name: Prepare release bundle
        run: |
          set -euo pipefail
          mkdir -p release-files
          find release -type f -name '*.tar.gz' -exec mv {} release-files/ \;
          find release -type f -name '*.zip' -exec mv {} release-files/ \;
          find release -type f -name '*.sha256' -exec cat {} \; > release-files/checksums.txt
      - name: Install cosign
        uses: sigstore/cosign-installer@v3
      - name: Sign artifacts
        env:
          COSIGN_EXPERIMENTAL: "1"
          COSIGN_YES: "true"
        run: |
          set -euo pipefail
          for file in release-files/*.tar.gz release-files/*.zip release-files/checksums.txt; do
            [ -f "$file" ] || continue
            cosign sign-blob --yes --output-signature "${file}.sig" --output-certificate "${file}.pem" "$file"
          done
      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            release-files/*.tar.gz
            release-files/*.zip
            release-files/checksums.txt
            release-files/*.sig
            release-files/*.pem
